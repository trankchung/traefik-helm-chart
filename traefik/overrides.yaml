# Default values for Traefik
image:
  name: traefik
  tag: 2.1.3

mode: daemonset

#
# Configure the deployment
#
deployment:
  # Number of pods of the deployment
  replicas: 1

additional:
  checkNewVersion: true
  sendAnonymousUsage: true

rollingUpdate:
  maxUnavailable: 1
  maxSurge: 1

#
# Configure Traefik entry points
# Additional arguments to be passed at Traefik's binary
## Use curly braces to pass values: `helm install --set="{--providers.kubernetesingress,--global.checknewversion=true}" ."
additionalArguments:
  - --providers.kubernetesingress
  - --api.insecure

# Environment variables to be passed to Traefik's binary
env: {}
#  - name: SOME_VAR
#    value: some-var-value
#  - name: SOME_OTHER_VAR
#    value: some-other-var-value

#
ports:
  # The name of this one can't be changed as it is used for the readiness and
  # liveness probes, but you can adjust its config to your liking
  traefik:
    port: 9000
    # Defines whether the port is exposed if service.type is LoadBalancer or
    # NodePort.
    #
    # You SHOULD NOT expose the traefik port on production deployments.
    # If you want to access it from outside of your cluster,
    # use `kubectl proxy` or create a secure ingress
    expose: true
    # The exposed port for this service
    exposedPort: 9000
  web:
    port: 80
    expose: true
    exposedPort: 80
    # Use nodeport if set. This is useful if you have configured Traefik in a
    # LoadBalancer
    # nodePort: 32080
  websecure:
    port: 443
    expose: true
    exposedPort: 443
  # nodePort: 32443

# Options for the main traefik service, where the entrypoints traffic comes
# from.
service:
  type: LoadBalancer
  # Additional annotations (e.g. for cloud provider specific config)
  annotations: {}
  # Additional entries here will be added to the service spec. Cannot contains
  # type, selector or ports entries.
  spec: {}
    # externalTrafficPolicy: Cluster
    # loadBalancerIP: "1.2.3.4"
    # clusterIP: "2.3.4.5"

dashboard:
  # Enable the dashboard on Traefik
  enable: true

  # Expose the dashboard and api through an ingress route at /dashboard
  # and /api This is not secure and SHOULD NOT be enabled on production
  # deployments
  ingressRoute: false

  ingress:
    # Set to true to enable ingress record generation
    enabled: true

    # Ingress annotations done as key:value pairs
    # For a full list of possible ingress annotations, please see
    # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    #
    # If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    # If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
    annotations:
      kubernetes.io/ingress.class: traefik
      certmanager.k8s.io/cluster-issuer: releng-issuer

    # The list of hostnames to be covered with this ingress record.
    # Most likely this will be just one host, but in the event more hosts are needed, this is an array
    hosts:
    - name: rel-traefik.bb2qa.local
      path: /

      # Set this to true in order to enable TLS on the ingress record
      tls: true

      # Optionally specify the TLS hosts for the ingress record
      # Useful when the Ingress controller supports www-redirection
      # If not specified, the above host name will be used
      # tlsHosts:
      # - www.gogs.local
      # - gogs.local

      # If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      tlsSecret: traefik-tls-cert

logs:
  loglevel: WARN
#
resources: {}
  # requests:
  #   cpu: "100m"
  #   memory: "50Mi"
  # limits:
  #   cpu: "300m"
  #   memory: "150Mi"
affinity: {}
nodeSelector:
  ic: traefik
tolerations: []
